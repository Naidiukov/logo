// @! "do not remove comments below unless you know what you do!"
// @isDefault "false"
// @entity "inv_payers"
// @model "INV"
// @formType "custom"
// @caption "Громада"
// @description "Громада"
exports.formDef = 'INV.CommunitySearch';
const _ = require('lodash');
Ext.define('INV.CommunitySearch', {
  extend: "Ext.form.Panel",


  mainStore: Ext.create('Ext.data.Store', {
    fields: ['abbr', 'name'],
    data: [
      {"abbr": "without", "name": "Без фільтру"},
      {"abbr": "startWith", "name": "Починається з"},
      {"abbr": "like", "name": "Містить"},
      {"abbr": "equal", "name": "Дорівнює"},
      {"abbr": "isNull", "name": "Пусте значення"}
    ]
  }),

  clobStore: Ext.create('Ext.data.Store', {
    fields: ['abbr', 'name'],
    data: [
      {"abbr": "without", "name": "Без фільтру"},
      {"abbr": "startWith", "name": "Починається з"},
      {"abbr": "like", "name": "Містить"},
      {"abbr": "isNull", "name": "Пусте значення"}
    ]
  }),

  stateStore: Ext.create('Ext.data.Store', {
    fields: ['abbr', 'name'],
    data: [
      {"abbr": "without", "name": "Без фільтру"},
      {"abbr": "one", "name": "Одне значення"},
      {"abbr": "multi", "name": "Декілька значень"},
      {"abbr": "isNull", "name": "Пусте значення"}
    ]
  }),

  dateStore: Ext.create('Ext.data.Store', {
    fields: ['abbr', 'name'],
    data: [
      {"abbr": "without", "name": "Без фільтру"},
      {"abbr": "today", "name": "За сьогодні"},
      {"abbr": "yesterday", "name": "За вчора"},
      {"abbr": "lastWeek", "name": "За цей тиждень"},
      {"abbr": "lastMonth", "name": "За цей місяць"},
      {"abbr": "lastYear", "name": "За цей рік"},
      {"abbr": "from", "name": "З"},
      {"abbr": "to", "name": "По"},
      {"abbr": "date", "name": "За дату"},
      {"abbr": "period", "name": "За період"},
      {"abbr": "isNull", "name": "Пусте значення"}
    ]
  }),

  initComponent: function () {
    var me = this;

    me.extID = Ext.id();

    me.autoHeight = true;
    me.autoWidth = true;
    me.isOpenSecondTime = false;


    function setTextChanged (ctrl, newValue) {
      var condItemId = ctrl.searchControlCode
      var valueItemId = condItemId.substr(0, condItemId.length - 4) + 'Value'
      if (newValue == 'without' || newValue == 'isNull') {
        me.cmp[valueItemId].hide()
      } else {
        me.cmp[valueItemId].setValue(null)
        me.cmp[valueItemId].show()
      }
    }

    function setComboChanged (ctrl, newValue) {
      var condItemId = ctrl.searchControlCode
      var valueItemId = condItemId.substr(0, condItemId.length - 4) + 'Value'
      var valuesItemId = condItemId.substr(0, condItemId.length - 4) + 'Values'

      if (newValue) {
        if (me.cmp[valueItemId]) {
          me.cmp[valueItemId].setValue(null)
        }
        if (me.cmp[valuesItemId]) {
          me.cmp[valuesItemId].setValue(null)
        }
      }

      if (newValue == 'one') {
        if (me.cmp[valueItemId]) {
          me.cmp[valueItemId].show()
        }
        if (me.cmp[valuesItemId]) {
          me.cmp[valuesItemId].hide()
        }
      }

      if (newValue == 'multi') {
        if (me.cmp[valueItemId]) {
          me.cmp[valueItemId].hide()
        }
        if (me.cmp[valuesItemId]) {
          me.cmp[valuesItemId].show()
        }
      }

      if (newValue == 'without' || newValue == 'isNull') {
        if (me.cmp[valueItemId]) {
          me.cmp[valueItemId].hide()
        }
        if (me.cmp[valuesItemId]) {
          me.cmp[valuesItemId].hide()
        }
        if (me.cmp[valueItemId]) {
          me.cmp[valueItemId].setValue(null)
        }
        if (me.cmp[valuesItemId]) {
          me.cmp[valuesItemId].setValue(null)
        }
      }
    }

    function setDateCondChange (ctrl, newValue) {
      var condItemId = ctrl.searchControlCode
      var valueFromItemId =
        condItemId.substr(0, condItemId.length - 4) + 'ValueFrom'
      var valueToItemId =
        condItemId.substr(0, condItemId.length - 4) + 'ValueTo'
      if (newValue) {
        me.cmp[valueFromItemId].setValue(null)
        me.cmp[valueToItemId].setValue(null)

        if (
          newValue == 'without' ||
          newValue == 'today' ||
          newValue == 'yesterday' ||
          newValue == 'lastWeek' ||
          newValue == 'lastMonth' ||
          newValue == 'lastYear' ||
          newValue == 'isNull'
        ) {
          me.cmp[valueFromItemId].hide()
          me.cmp[valueToItemId].hide()
        }

        if (newValue == 'from' || newValue == 'to' || newValue == 'date') {
          me.cmp[valueFromItemId].show()
          me.cmp[valueToItemId].hide()
        }

        if (newValue == 'period') {
          me.cmp[valueFromItemId].show()
          me.cmp[valueToItemId].show()
        }
      }
    }

    function getTextSearchValue (ctrl) {
      var condItemId = ctrl.searchControlCode
      var valueItemId = condItemId.substr(0, condItemId.length - 4) + 'Value'
      var condValue = ctrl.getValue()
      var valValue = me.cmp[valueItemId].getValue()
      switch (condValue) {
        case 'without':
          return
        case 'startWith':
          if (valValue) {
            return { pattern: valValue + '%' }
          } else {
            return
          }
        case 'like':
          if (valValue) {
            return { pattern: '%' + valValue + '%' }
          } else {
            return
          }
        case 'equal':
          if (valValue) {
            return { value: valValue }
          } else {
            return
          }
        case 'isNull':
          return null
      }
    }

    function getClobSearchValue (ctrl) {
      var condItemId = ctrl.searchControlCode
      var valueItemId = condItemId.substr(0, condItemId.length - 4) + 'Value'
      var condValue = ctrl.getValue()
      var valValue = me.cmp[valueItemId].getValue()
      if (valueItemId.toLowerCase().includes('globalprops') && valValue) {
        let valuesForProps
        let insigCharacters = /[^a-zа-я\s\d\і\ґ\ї\ё\є]/gmi
        // //let othersSymb = ['-', '\'', '№', '`', '(', ')']
        let transTable = { а: 'a', в: 'b', с: 'c', е: 'e', н: 'h', к: 'k', м: 'm', о: '0', р: 'p', т: 't', х: 'x', у: 'y', і: 'i', ґ: 'г', o: '0' }
        valuesForProps = valValue.replace(insigCharacters, ' ')
        Object.keys(transTable).forEach(repSymb => {
          let regRep = new RegExp(repSymb, 'gmi')
          valuesForProps = valuesForProps.replace(regRep, transTable[repSymb])
        })
        valuesForProps = valuesForProps.split(/\,|\s/g).filter(el => el).join(' ')
        valValue = valuesForProps.toLowerCase()
      }
      switch (condValue) {
        case 'like':
          if (valValue) {
            return { pattern: valValue }
          } else {
            return
          }
        case 'isNull':
          return null
      }
    }

    function getTextDisplayValue (ctrl) {
      var condItemId = ctrl.searchControlCode
      var valueItemId = condItemId.substr(0, condItemId.length - 4) + 'Value'
      var condValue = ctrl.getValue()
      var condText = ctrl.getRawValue()
      var valValue = me.cmp[valueItemId].getValue()
      var result = ctrl.fieldLabel + ': ' + condText
      switch (condValue) {
        case 'without':
          return
        case 'isNull':
          return result
        default:
          if (valValue) {
            return result + ' ' + valValue
          } else {
          }
      }
    }

    function getComboSearchValue (ctrl) {
      var condItemId = ctrl.searchControlCode
      var valueItemId =
        condItemId.substr(
          0,
          condItemId.length -
          (ctrl.multiple ? ctrl.multiple.toString().length + 4 : 4)
        ) +
        'Value' +
        (ctrl.multiple || '')
      var valuesItemId =
        condItemId.substr(
          0,
          condItemId.length -
          (ctrl.multiple ? ctrl.multiple.toString().length + 4 : 4)
        ) +
        'Values' +
        (ctrl.multiple || '')
      var condValue = ctrl.getValue()
      var valValue = me.cmp[valueItemId]
        ? me.cmp[valueItemId].getValue()
        : undefined
      var valValues = me.cmp[valuesItemId]
        ? me.cmp[valuesItemId].getValueArray()
        : undefined

      if (
        ctrl.forceArray &&
        !valValue &&
        (!valValues || (valValues && !valValues.length))
      ) {
        return
      } else if (ctrl.forceArray) {
        if (valValue && !(valValue instanceof Array)) {
          valValue = [valValue]
        }

        if (condValue !== 'without') {
          if (condValue === 'one' || condValue === 'multi') {
            return {
              valuesExists: valValue || valValues,
              subquery: {
                entity: ctrl.forceArray.entity,
                correlation: ctrl.forceArray.correlation
              }
            }
          } else if (condValue === 'isNull') {
            return null
          }
        }
      }

      if (ctrl.multiple) {
        switch (condValue) {
          case 'without':
            return
          case 'one':
            if (valValue) {
              return valValue
            } else {
              return
            }
          case 'multi':
            if (valValues && valValues.length > 0) {
              return valValues.length == 1 && !ctrl.forceArray
                ? valValues[0]
                : valValues
            } else {
              return
            }
          case 'isNull':
            return null
        }
      } else {
        switch (condValue) {
          case 'without':
            return
          case 'one':
            if (valValue) {
              return { value: valValue }
            } else {
              return
            }
          case 'multi':
            if (valValues && valValues.length > 0) {
              return valValues.length == 1 && !ctrl.forceArray
                ? { value: valValues[0] }
                : { values: valValues }
            } else {
              return
            }
          case 'isNull':
            return null
          case 'true':
            return { value: 1 }
          case 'false':
            return { value: 0 }
        }
      }
    }

    function getComboDisplayValue (ctrl) {
      var condItemId = ctrl.searchControlCode
      var valueItemId =
        condItemId.substr(
          0,
          condItemId.length -
          (ctrl.multiple ? ctrl.multiple.toString().length + 4 : 4)
        ) +
        'Value' +
        (ctrl.multiple || '')
      var valuesItemId =
        condItemId.substr(
          0,
          condItemId.length -
          (ctrl.multiple ? ctrl.multiple.toString().length + 4 : 4)
        ) +
        'Values' +
        (ctrl.multiple || '')
      var condValue = ctrl.getValue()
      var condText = ctrl.getRawValue()
      var valValue = me.cmp[valueItemId]
        ? me.cmp[valueItemId].getRawValue()
        : undefined
      var valValues = me.cmp[valuesItemId]
        ? me.cmp[valuesItemId].getValue()
        : undefined
      var result = ctrl.fieldLabel + ': ' + condText

      switch (condValue) {
        case 'without':
          return
        case 'isNull':
          return result
        case 'one':
          if (valValue) {
            return result + ' ' + valValue
          } else {
            return
          }
        case 'multi':
          if (valValues && valValues.length > 0) {
            return valValues.length == 1
              ? result + ' ' + valValues[0]
              : result + ' кілька значень'
          } else {
            return
          }
        case 'true':
          return result
        case 'false':
          return result
      }
    }

    function getDateSearchValue (ctrl) {
      var condItemId = ctrl.searchControlCode
      var valueFromItemId =
        condItemId.substr(0, condItemId.length - 4) + 'ValueFrom'
      var valueToItemId =
        condItemId.substr(0, condItemId.length - 4) + 'ValueTo'
      var condValue = ctrl.getValue()
      var valValueFrom = me.cmp[valueFromItemId].getValue()
      valValueFrom = UB.core.UBUtil.truncTimeToUtcNull(valValueFrom)
      var valValueTo = me.cmp[valueToItemId].getValue()
      valValueTo = UB.core.UBUtil.truncTimeToUtcNull(valValueTo)

      var currentDate = new Date()
      currentDate.setUTCHours(0, 0, 0)

      var x, lastDate
      switch (condValue) {
        case 'without':
          return
        case 'today':
          return { from: currentDate, to: currentDate }
        case 'yesterday':
          lastDate = Ext.Date.add(currentDate, Ext.Date.DAY, -1)
          return { from: lastDate, to: lastDate }
        case 'lastWeek':
          x = currentDate.getDay()
          lastDate = Ext.Date.add(currentDate, Ext.Date.DAY, -x + 1)
          return { from: lastDate, to: currentDate }
        case 'lastMonth':
          x = currentDate.getDate()
          lastDate = Ext.Date.add(currentDate, Ext.Date.DAY, -x + 1)
          return { from: lastDate, to: currentDate }
        case 'lastYear':
          lastDate = new Date(
            Date.UTC(currentDate.getUTCFullYear(), 0, 1, 0, 0, 0, 0)
          )
          return { from: lastDate, to: currentDate }
        case 'from':
          if (valValueFrom) {
            return { from: valValueFrom }
          } else {
            return
          }
        case 'to':
          if (valValueFrom) {
            return { to: valValueFrom }
          } else {
            return
          }
        case 'date':
          if (valValueFrom) {
            return { from: valValueFrom, to: valValueFrom }
          } else {
            return
          }
        case 'period':
          if (valValueFrom && valValueTo) {
            return { from: valValueFrom, to: valValueTo }
          } else {
            return
          }
        case 'isNull':
          return null
      }
    }

    function getDateDisplayValue (ctrl) {
      var condItemId = ctrl.searchControlCode
      var valueFromItemId =
        condItemId.substr(0, condItemId.length - 4) + 'ValueFrom'
      var valueToItemId =
        condItemId.substr(0, condItemId.length - 4) + 'ValueTo'
      var condValue = ctrl.getValue()
      var condText = ctrl.getRawValue()
      var valValueFrom = me.cmp[valueFromItemId].getValue()
      valValueFrom = UB.core.UBUtil.truncTimeToUtcNull(valValueFrom)
      var valValueTo = me.cmp[valueToItemId].getValue()
      valValueTo = UB.core.UBUtil.truncTimeToUtcNull(valValueTo)
      var result = ctrl.fieldLabel + ': ' + condText

      var currentDate = new Date()
      currentDate.setUTCHours(0, 0, 0)

      switch (condValue) {
        case 'without':
          return
        case 'isNull':
        case 'today':
        case 'yesterday':
        case 'lastWeek':
        case 'lastMonth':
        case 'lastYear':
          return result
        case 'from':
        case 'to':
        case 'date':
          if (valValueFrom) {
            return result + ' ' + Ext.Date.format(valValueFrom, 'd.m.Y')
          } else {
            return
          }
        case 'period':
          if (valValueFrom && valValueTo) {
            return (
              result +
              ' ' +
              Ext.Date.format(valValueFrom, 'd.m.Y') +
              ' - ' +
              Ext.Date.format(valValueTo, 'd.m.Y')
            )
          } else {
          }
      }
    }

    function periodRangeValidate (ctrl) {
      var condItemId = ctrl.searchControlCode
      var condValue = ctrl.getValue()
      if (condValue == 'period' || condValue == 'range') {
        var valueFromItemId =
          condItemId.substr(0, condItemId.length - 4) + 'ValueFrom'
        var valueToItemId =
          condItemId.substr(0, condItemId.length - 4) + 'ValueTo'
        var valValueFrom = me.cmp[valueFromItemId].getValue()
        var hasValueFrom = valValueFrom === 0 || !!valValueFrom
        var valValueTo = me.cmp[valueToItemId].getValue()
        var hasValueTo = valValueTo === 0 || !!valValueTo
        if (hasValueFrom && !hasValueTo) {
          me.cmp[valueToItemId].markInvalid(
            'Це поле є обов’язковим для заповнення'
          )
          return false
        } else if (!hasValueFrom && hasValueTo) {
          me.cmp[valueFromItemId].markInvalid(
            'Це поле є обов’язковим для заповнення'
          )
          return false
        } else {
          return true
        }
      } else {
        return true
      }
    }

    function getTextField (itemId, fieldLabel, defaultValue = 'startWith') {
      return {
        items: [
          {
            xtype: 'combobox',
            itemId: itemId + 'Cond',
            fieldLabel: fieldLabel,
            displayField: 'name',
            valueField: 'abbr',
            width: 260,
            minWidth: 260,
            forceSelection: true,
            store: me.mainStore,
            labelWidth: 110,
            margin: '5, 10, 0, 10',
            defaultValue,
            listeners: {
              change: setTextChanged
            },
            getSearchValue: getTextSearchValue,
            getSearchText: getTextDisplayValue
          },
          {
            xtype: 'textfield',
            itemId: itemId + 'Value',
            maxLength: 50,
            width: 213,
            minWidth: 213,
            margin: '5, 10, 0, 10',
            flex: 1
          }
        ]
      }
    }

    function getClobField (itemId, fieldLabel, defaultValue = 'like') {
      return {
        items: [
          {
            xtype: 'combobox',
            itemId: itemId + 'Cond',
            fieldLabel: fieldLabel,
            displayField: 'name',
            valueField: 'abbr',
            width: 350,
            minWidth: 350,
            forceSelection: true,
            store: me.clobStore,
            labelWidth: 200,
            margin: '5, 10, 0, 10',
            defaultValue,
            listeners: {
              change: setTextChanged
            },
            getSearchValue: getClobSearchValue,
            getSearchText: getTextDisplayValue
          },
          {
            xtype: 'textfield',
            itemId: itemId + 'Value',
            maxLength: 50,
            width: 213,
            minWidth: 213,
            margin: '5, 10, 0, 10',
            flex: 1
          }
        ]
      }
    }

    function getNumberField (itemId, fieldLabel, defaultValue = 'startWith') {
      return {
        items: [
          {
            xtype: 'combobox',
            itemId: itemId + 'Cond',
            fieldLabel: fieldLabel,
            displayField: 'name',
            valueField: 'abbr',
            width: 260,
            minWidth: 260,
            forceSelection: true,
            store: me.mainStore,
            labelWidth: 110,
            margin: '5, 10, 0, 10',
            defaultValue,
            listeners: {
              change: setTextChanged
            },
            getSearchValue: getTextSearchValue,
            getSearchText: getTextDisplayValue
          },
          {
            xtype: 'numberfield',
            itemId: itemId + 'Value',
            maxLength: 30,
            width: 213,
            minWidth: 213,
            margin: '5, 10, 0, 10',
            flex: 1
          }
        ]
      }
    }

    function getEnumField (itemId, fieldLabel, eGroup, defaultValue = 'one') {
      return {
        items: [
          {
            xtype: 'combobox',
            itemId: itemId + 'Cond',
            fieldLabel: fieldLabel,
            displayField: 'name',
            valueField: 'abbr',
            width: 260,
            minWidth: 260,
            forceSelection: true,
            store: me.stateStore,
            labelWidth: 110,
            margin: '5, 10, 0, 10',
            defaultValue,
            listeners: {
              change: setComboChanged
            },
            getSearchValue: getComboSearchValue,
            getSearchText: getComboDisplayValue
          },
          {
            xtype: 'ubcombobox',
            itemId: itemId + 'Value',
            fieldLabel: '',
            displayField: 'name',
            disableContextMenu: true,
            valueField: 'code',
            flex: 1,
            width: 213,
            minWidth: 213,
            ubRequest: {
              entity: 'ubm_enum',
              method: 'select',
              fieldList: ['ID', 'eGroup', 'name', 'sortOrder', 'code'],
              whereList: {
                byGroup: {
                  expression: '[eGroup]',
                  condition: 'equal',
                  values: { state: eGroup }
                }
              },
              orderList: {
                sortOrder: { expression: 'sortOrder', order: 'asc' }
              }
            },
            margin: '5, 10, 0, 10'
          },
          {
            xtype: 'ubboxselect',
            itemId: itemId + 'Values',
            displayField: 'name',
            multiSelect: true,
            hidden: true,
            flex: 1,
            width: 213,
            minWidth: 213,
            valueField: 'code',
            ubRequest: {
              entity: 'ubm_enum',
              method: 'select',
              fieldList: ['ID', 'eGroup', 'name', 'sortOrder', 'code'],
              whereList: {
                byGroup: {
                  expression: '[eGroup]',
                  condition: 'equal',
                  values: { state: eGroup }
                }
              },
              orderList: {
                sortOrder: { expression: 'sortOrder', order: 'asc' }
              }
            },
            margin: '5, 10, 0, 10'
          }
        ]
      }
    }

    function getBoolField (itemId, fieldLabel, defaultValue = 'without') {
      return {
        items: [
          {
            xtype: 'combobox',
            itemId: itemId + 'Value',
            fieldLabel: fieldLabel,
            displayField: 'name',
            valueField: 'abbr',
            width: 350,
            minWidth: 350,
            forceSelection: true,
            store: me.boolStore,
            labelWidth: 200,
            margin: '5, 10, 0, 10',
            defaultValue,
            listeners: {
              change: setComboChanged
            },
            getSearchValue: getComboSearchValue,
            getSearchText: getComboDisplayValue
          }
        ]
      }
    }

    function getAddSearchComboBox (isFromAction = false) {
      return isFromAction ? {
        layout: {
          type: 'vbox',
          align: 'stretch'
        },
        items: [
          {
            xtype: 'checkbox',
            itemId: 'managOrOwner',
            fieldLabel: 'Є ухвала про передачу в управління АРМА/згода власника',
            displayField: 'name',
            valueField: 'abbr',
            width: 450,
            labelWidth: 400,
            minWidth: 350,
            forceSelection: true,
            margin: '5, 10, 0, 10',
            defaultValue: true,
            hidden: false,
            listeners: {
              change: function (fld, newV, oldV) {
                const me = fld.up('form')
                if (!newV) {
                  me.queryById('isProc').hide(true)
                  me.queryById('isProc').setValue(false)
                } else {
                  me.queryById('isProc').show(true)
                  me.queryById('isProc').setValue(false)
                }
              }
            }
          },
          {
            xtype: 'checkbox',
            itemId: 'isProc',
            fieldLabel: 'Є звернення прокурора',
            displayField: 'name',
            valueField: 'abbr',
            labelWidth: 400,
            width: 450,
            minWidth: 350,
            forceSelection: true,
            margin: '5, 10, 0, 10',
            defaultValue: true,
            hidden: false
          }
        ]
      }	: null
    }

    function getDateField (itemId, fieldLabel, defaultValue = 'period') {
      return {
        items: [
          {
            xtype: 'combobox',
            itemId: itemId + 'Cond',
            fieldLabel: fieldLabel,
            displayField: 'name',
            forceSelection: true,
            valueField: 'abbr',
            width: 260,
            minWidth: 260,
            type: 'date',
            store: me.dateStore,
            labelWidth: 110,
            margin: '5, 10, 0, 10',
            defaultValue,
            listeners: {
              change: setDateCondChange
            },
            getSearchValue: getDateSearchValue,
            customValidateFn: periodRangeValidate,
            getSearchText: getDateDisplayValue
          },
          {
            xtype: 'datefield',
            itemId: itemId + 'ValueFrom',
            margin: '5, 10, 0, 10'
          },
          {
            xtype: 'datefield',
            itemId: itemId + 'ValueTo',
            margin: '5, 10, 0, 10'
          }
        ]
      }
    }

    // multiple - на один контрол несколько поисков
    function getComboField (
      itemId,
      fieldLabel,
      entity,
      fieldList,
      displayField,
      forceArray,
      multiple,
      defaultValue = 'one'
    ) {
      return {
        items: [
          {
            xtype: 'combobox',
            itemId: itemId + 'Cond' + (multiple || ''),
            multiple: multiple,
            fieldLabel: fieldLabel,
            displayField: 'name',
            valueField: 'abbr',
            width: 260,
            minWidth: 260,
            forceSelection: true,
            store: me.stateStore,
            labelWidth: 110,
            margin: '5, 10, 0, 10',
            defaultValue,
            forceArray: forceArray,
            listeners: {
              change: setComboChanged
            },
            getSearchValue: getComboSearchValue,
            getSearchText: getComboDisplayValue
          },
          {
            xtype: 'ubcombobox',
            disableContextMenu: true,
            itemId: itemId + 'Value' + (multiple || ''),
            multiple: multiple,
            fieldLabel: '',
            displayField: displayField || 'name',
            valueField: 'ID',
            flex: 1,
            width: 213,
            minWidth: 213,
            ubRequest: {
              entity: entity,
              method: 'select',
              fieldList: _.concat(['ID'], fieldList || ['name']),
              orderList: { ID: { expression: 'ID', order: 'asc' } }
            },
            margin: '5, 10, 0, 10'
          },
          {
            xtype: 'ubboxselect',
            itemId: itemId + 'Values' + (multiple || ''),
            multiple: multiple,
            displayField: displayField || 'name',
            multiSelect: true,
            hidden: true,
            flex: 1,
            width: 213,
            minWidth: 213,
            valueField: 'ID',
            store: Ext.create('UB.ux.data.UBStore', {
              ubRequest: {
                entity: entity,
                method: 'select',
                fieldList: _.concat(['ID'], fieldList || ['name']),
                orderList: { ID: { expression: 'ID', order: 'asc' } }
              }
            }),
            margin: '5, 10, 0, 10'
          }
        ]
      }
    }

    function prepareText (itemId, fieldLabel, defaultValue = 'like') {
      return {
        items: [
          {
            xtype: 'combobox',
            itemId: itemId + 'Cond',
            fieldLabel,
            displayField: 'name',
            valueField: 'abbr',
            width: 350,
            minWidth: 350,
            forceSelection: true,
            store: me.mainStore,
            margin: '5, 10, 0, 10',
            defaultValue,
            hidden: true,
            listeners: {
              change: setTextChanged
            },
            getSearchValue: getClobSearchValue,
            getSearchText: getTextDisplayValue
          },
          {
            xtype: 'textfield',
            itemId: itemId + 'Value',
            fieldLabel,
            labelWidth: 200,
            minWidth: 583,
            margin: '5, 10, 0, 10',
            flex: 1
          },
          {
            xtype: 'button',
            iconCls: 'fa fa-question-circle-o',
            handler: function (btn) {
              const win = Ext.create('widget.window', { // создание окна
                title: 'Словниковий пошук(опис)',
                html: `<span style="font-size: 16px;font-weight: 400;">
                           Здійснює пошук за полями "Тип", "Вид", "Актив", "Опис",
                            інформацією щодо місцезнаходження активу,
                             його власника та іншими атрибутами,
                              що відповідають різним видам активів
                       </span>`,
                x: 650, // позиция на экране данного окна относительно родительского окна по оси X
                y: 300, // позиция на экране данного окна относительно родительского окна по оси Y
                width: '30%', // ширина окна может быть задана в px,%, em
                autoHeight: true, // установка автоматического определения высоты окна в зависимости от его содержимого
                autoScroll: true, // разрешение прокрутки содердимого окна, если текст не влезает
                maximizable: false, // значок "раскрыть окно на весь экран"
                bodyCls: 'hint__content', // установка класса для содержимого окна, который может быть привязан к CSS
                bodyPadding: '15px', // установка паддинга для содержимого внутри окна.
                bodyStyle: 'background-color: #ffffff', // прямое указание стиля для содержимого окна
                closeAction: 'hide', // !!! Важно. Указание на то, что окно при закрывании не удаляется вместе с содержимым,
                /*  этот блок параметров лишний. Они и так выставлены по умолчанию так, как указано ниже: */
                shadow: true, // тень
                resizable: false, // возможность изменения размеров окна
                draggable: true, // возможность перетаскивания окна
                closable: true, // спрятать иконку закрытия окна в заголовке
                modal: true, //  modal делает окно модальным, то есть становятся недоступны все другие элементы на странице
                headerPosition: 'top' //  заголовок  и кнопку закрытия разместим справа {left, top, right, bottom}
              })
              win.show()
              Ext.getBody().on('click', function (e, t) {
                const hint = btn.getEl()
                if (!(hint.dom === t || hint.contains(t))) {
                  win.close()
                }
              })
            }
          }
        ]
      }
    }
    function getComboVsWL (
      itemId,
      fieldLabel,
      entity,
      fieldList,
      displayField,
      forceArray,
      multiple,
      defaultValue = 'one'
    ) {
      return {
        items: [
          {
            xtype: 'combobox',
            itemId: itemId + 'Cond' + (multiple || ''),
            multiple: multiple,
            fieldLabel: fieldLabel,
            displayField: 'name',
            valueField: 'abbr',
            width: 350,
            minWidth: 350,
            forceSelection: true,
            store: me.stateStore,
            labelWidth: 200,
            margin: '5, 10, 0, 10',
            defaultValue,
            forceArray: forceArray,
            hidden: true,
            listeners: {
              change: setComboChanged
            },
            getSearchValue: getComboSearchValue,
            getSearchText: getComboDisplayValue
          },
          {
            xtype: 'ubcombobox',
            disableContextMenu: true,
            itemId: itemId + 'Value',
            fieldLabel,
            displayField: 'name',
            valueField: 'ID',
            flex: 1,
            labelWidth: 200,
            minWidth: 583,
            ubRequest: {
              entity: entity,
              method: 'select',
              fieldList: ['ID', 'name'],
              orderList: { ID: { expression: 'ID', order: 'asc' } },
              whereList: { byType: { expression: '[dType]', condition: 'in', value: ['Judicial', 'Cancel', 'Owner'] } }
            },
            margin: '5, 10, 0, 10'
          }
        ]
      }
    }

    me.items = [
      {
        xtype: 'tabpanel',
        itemId: 'cmpTabPanel',
        autoDestroy: false,
        autoRender: true,
        minWidth: 600,
        margin: '10 10 10 10',
        layout: 'auto',

        items: [
          {
            itemId: "mainTab",
            title: 'Загальні дані',
            layout: {
              type: 'vbox',
              pack: 'center',
              align: 'top'
            },
            defaults: {
              layout: {
                type: "hbox",
                pack: "center",
                align: "middle"
              }
            },
            items: [
              getTextField("lastName", "Прізвище"),
              getTextField("firstName", "Ім'я"),
              getTextField("middleName", "По батькові"),
              getTextField("prevLastName", "Попереднє прізвище"),
              getComboField(
                'nationality',
                'Громадянство',
                'inv_countryDict'
              ),
              getDateField("birthDate", "Дата народження"),
              getDateField("deathDate", "Дата смерті"),
              getEnumField(
                'gender',
                'Стать',
                'GENDER'
              ),
              getNumberField("EDDRecordNum", "Номер запису в ЄДДР"),
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "personNumCond",
                    fieldLabel: "Номер громадянина",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "personNumValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "idnCodeCond",
                    fieldLabel: "РНОКПП",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "idnCodeValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              }
            ]
          },
          {
            itemId: "sertifTab",
            title: 'Свідоцтва',
            layout: {
              type: 'vbox',
              align: 'top'
            },
            defaults: {
              layout: {
                type: "hbox",
                pack: "center",
                align: "middle"
              }
            },
            items: [{
              items: [
                {
                  xtype: 'combobox',
                  itemId: "birthCertificateCond",
                  fieldLabel: "№ свідоцтва про народження",
                  displayField: 'name',
                  valueField: 'abbr',
                  width: 260,
                  minWidth: 260,
                  forceSelection: true,
                  store: me.mainStore,
                  labelWidth: 110,
                  margin: '5, 10, 0, 10',
                  defaultValue: "startWith",
                  listeners: {
                    change: setTextChanged
                  },
                  getSearchValue: getTextSearchValue,
                  getSearchText: getTextDisplayValue
                },
                {
                  xtype: 'textfield',
                  itemId: "birthCertificateValue",
                  maxLength: 50,
                  width: 213,
                  minWidth: 213,
                  margin: '5, 10, 0, 10',
                  flex: 1
                }
              ]
            },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "birthCertifDateCond",
                    fieldLabel: "Дата видання свідоцтва про народження",
                    displayField: 'name',
                    forceSelection: true,
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    type: 'date',
                    store: me.dateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'period',
                    listeners: {
                      change: setDateCondChange
                    },
                    getSearchValue: getDateSearchValue,
                    customValidateFn: periodRangeValidate,
                    getSearchText: getDateDisplayValue
                  },
                  {
                    xtype: 'datefield',
                    itemId: "birthCertifDateValueFrom",
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: 'datefield',
                    itemId: "birthCertifDateValueTo",
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "birthCertifIssuedByCond",
                    fieldLabel: "Ким видано свідоцтво про народження",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "birthCertifIssuedByValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "inv_regUnit",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "birthCertifIssuedByValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "inv_regUnit",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "idCardNumberCond",
                    fieldLabel: "№ паспорта нового зразка",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "idCardNumberValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "passportSeriesCond",
                    fieldLabel: "Серія/номер паспорта.Серія",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "passportSeriesValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "passportNumberCond",
                    fieldLabel: "Серія/номер паспорта.Номер",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'numberfield',
                    itemId: "passportNumberValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "passportIssueDateCond",
                    fieldLabel: "Дата видачі",
                    displayField: 'name',
                    forceSelection: true,
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    type: 'date',
                    store: me.dateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'period',
                    listeners: {
                      change: setDateCondChange
                    },
                    getSearchValue: getDateSearchValue,
                    customValidateFn: periodRangeValidate,
                    getSearchText: getDateDisplayValue
                  },
                  {
                    xtype: 'datefield',
                    itemId: "passportIssueDateValueFrom",
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: 'datefield',
                    itemId: "passportIssueDateValueTo",
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "passportIssuedByCond",
                    fieldLabel: "Ким видано",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "passportIssuedByValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "inv_regUnit",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "passportIssuedByValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "inv_regUnit",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "passportValidToDateCond",
                    fieldLabel: "Дійсний до",
                    displayField: 'name',
                    forceSelection: true,
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    type: 'date',
                    store: me.dateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'period',
                    listeners: {
                      change: setDateCondChange
                    },
                    getSearchValue: getDateSearchValue,
                    customValidateFn: periodRangeValidate,
                    getSearchText: getDateDisplayValue
                  },
                  {
                    xtype: 'datefield',
                    itemId: "passportValidToDateValueFrom",
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: 'datefield',
                    itemId: "passportValidToDateValueTo",
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "deathCertificateCond",
                    fieldLabel: "№ свідоцтва про смерть",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "deathCertificateValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "deathCertifDateCond",
                    fieldLabel: "Дата видання свідоцтва про смерть",
                    displayField: 'name',
                    forceSelection: true,
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    type: 'date',
                    store: me.dateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'period',
                    listeners: {
                      change: setDateCondChange
                    },
                    getSearchValue: getDateSearchValue,
                    customValidateFn: periodRangeValidate,
                    getSearchText: getDateDisplayValue
                  },
                  {
                    xtype: 'datefield',
                    itemId: "deathCertifDateValueFrom",
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: 'datefield',
                    itemId: "deathCertifDateValueTo",
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "deathCertifIssuedByCond",
                    fieldLabel: "Ким видано свідоцтво про смерть",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "deathCertifIssuedByValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "inv_regUnit",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "deathCertifIssuedByValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "inv_regUnit",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              }]
          },
          {
            itemId: "contactTab",
            title: 'Контактні дані',
            layout: {
              type: 'vbox',
              align: 'top'
            },
            defaults: {
              layout: {
                type: "hbox",
                pack: "center",
                align: "middle"
              }
            },
            items: [
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "emailCond",
                    fieldLabel: "Електронна адреса",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "emailValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "phoneCond",
                    fieldLabel: "Номер телефону",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "phoneValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "privilegeStartDateCond",
                    fieldLabel: "Дата початку дії пільги",
                    displayField: 'name',
                    forceSelection: true,
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    type: 'date',
                    store: me.dateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'period',
                    listeners: {
                      change: setDateCondChange
                    },
                    getSearchValue: getDateSearchValue,
                    customValidateFn: periodRangeValidate,
                    getSearchText: getDateDisplayValue
                  },
                  {
                    xtype: 'datefield',
                    itemId: "privilegeStartDateValueFrom",
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: 'datefield',
                    itemId: "privilegeStartDateValueTo",
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "privilegeEndDateCond",
                    fieldLabel: "Дата закінчення дії пільги",
                    displayField: 'name',
                    forceSelection: true,
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    type: 'date',
                    store: me.dateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'period',
                    listeners: {
                      change: setDateCondChange
                    },
                    getSearchValue: getDateSearchValue,
                    customValidateFn: periodRangeValidate,
                    getSearchText: getDateDisplayValue
                  },
                  {
                    xtype: 'datefield',
                    itemId: "privilegeEndDateValueFrom",
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: 'datefield',
                    itemId: "privilegeEndDateValueTo",
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "privilegePhysIDCond",
                    fieldLabel: "Пільгова категорія",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    itemId: "privilegePhysIDValue",
                    fieldLabel: "",
                    displayField: 'exemptionCat',
                    disableContextMenu: true,
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "inv_exemptionPhysDict",
                      method: "select",
                      fieldList: ['ID', 'exemptionCat'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "privilegePhysIDValues",
                    displayField: "exemptionCat",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "inv_exemptionPhysDict",
                        method: "select",
                        fieldList: ['ID', 'exemptionCat'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "notesCond",
                    fieldLabel: "Додатково",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "notesValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              }
            ]
          },
          {
            itemId: "importTab",
            title: 'Імпортована адреса',
            layout: {
              type: 'vbox',
              pack: 'center',
              align: 'top'
            },
            defaults: {
              layout: {
                type: "hbox",
                pack: "center",
                align: "middle"
              }
            },
            items: [
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "natalPlaceCond",
                    fieldLabel: "Місце народження",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "natalPlaceValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "countryCond",
                    fieldLabel: "Країна",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "countryValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "countryValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "inv_countryDict",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "areaCond",
                    fieldLabel: "Область",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "areaValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "settlementCond",
                    fieldLabel: "Населений пункт",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "settlementValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "addressAtuIDCond",
                    fieldLabel: "Адреса реєстрації",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "addressAtuIDValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "addressCond",
                    fieldLabel: "Адреса реєстрації. Адреса",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "addressValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "birthPlaceAtuIDCond",
                    fieldLabel: "Місце проживання",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "birthPlaceAtuIDValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "birthPlaceCond",
                    fieldLabel: "Місце проживання. Адреса",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "birthPlaceValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              }
            ]
          },
          {
            itemId: "birthTab",
            title: 'Місце народження',
            layout: {
              type: 'vbox',
              pack: 'center',
              align: 'top'
            },
            defaults: {
              layout: {
                type: "hbox",
                pack: "center",
                align: "middle"
              }
            },
            items: [
              getTextField("natalPlaceBCond", "Місце народження"),
              getComboField("countryBCond", "Країна", "inv_countryDict"),
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "areaBCond",
                    fieldLabel: "Область",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "areaBValue",
                    fieldLabel: "",
                    displayField: 'areaName',
                    valueField: 'areaName',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_ngoDict",
                      method: "select",
                      fieldList: ['areaName'],
                      orderList: {areaName: {expression: "areaName", order: 'asc'}},
                      groupList: ["areaName"]
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "areaBValues",
                    displayField: "areaName",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "areaName",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_ngoDict",
                        method: "select",
                        fieldList: ['areaName'],
                        orderList: {areaName: {expression: "areaName", order: 'asc'}},
                        groupList: ["areaName"]
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regionBCond",
                    fieldLabel: "Район",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regionBValue",
                    fieldLabel: "",
                    displayField: 'regionName',
                    valueField: 'regionName',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_ngoDict",
                      method: "select",
                      fieldList: ['regionName'],
                      orderList: {regionName: {expression: "regionName", order: 'asc'}},
                      groupList: ["regionName"]
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regionBValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_ngoDict",
                        method: "select",
                        fieldList: ['regionName'],
                        orderList: {regionName: {expression: "regionName", order: 'asc'}},
                        groupList: ["regionName"]
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "settlementBCond",
                    fieldLabel: "Населений пункт",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "settlementBValue",
                    fieldLabel: "",
                    displayField: 'governmentFullName',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_settlementDict",
                      method: "select",
                      fieldList: ['ID', 'governmentFullName'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "settlementBValues",
                    displayField: "governmentFullName",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_settlementDict",
                        method: "select",
                        fieldList: ['ID', 'governmentFullName'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              }
            ]
          },
          {
            itemId: "addrRTab",
            title: 'Адреса реєстрації',
            layout: {
              type: 'vbox',
              pack: 'center',
              align: 'top'
            },
            defaults: {
              layout: {
                type: "hbox",
                pack: "center",
                align: "middle"
              }
            },
            items: [
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "areaAddRCond",
                    fieldLabel: "Область",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "areaAddRValue",
                    fieldLabel: "",
                    displayField: 'areaName',
                    valueField: 'areaName',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_ngoDict",
                      method: "select",
                      fieldList: ['areaName'],
                      orderList: {areaName: {expression: "areaName", order: 'asc'}},
                      groupList: ["areaName"]
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "areaAddRValues",
                    displayField: "areaName",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "areaName",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_ngoDict",
                        method: "select",
                        fieldList: ['areaName'],
                        orderList: {areaName: {expression: "areaName", order: 'asc'}},
                        groupList: ["areaName"]
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regionAddRCond",
                    fieldLabel: "Район",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regionAddRValue",
                    fieldLabel: "",
                    displayField: 'regionName',
                    valueField: 'regionName',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_ngoDict",
                      method: "select",
                      fieldList: ['regionName'],
                      orderList: {regionName: {expression: "regionName", order: 'asc'}},
                      groupList: ["regionName"]
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regionAddRValues",
                    displayField: "regionName",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "regionName",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_ngoDict",
                        method: "select",
                        fieldList: ['regionName'],
                        orderList: {regionName: {expression: "regionName", order: 'asc'}},
                        groupList: ["regionName"]
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "settlementAddRCond",
                    fieldLabel: "Населений пункт",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "settlementAddRValue",
                    fieldLabel: "",
                    displayField: 'governmentFullName',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_settlementDict",
                      method: "select",
                      fieldList: ['ID', 'governmentFullName'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "settlementAddRValues",
                    displayField: "governmentFullName",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_settlementDict",
                        method: "select",
                        fieldList: ['ID', 'governmentFullName'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "streetTypeAddRCond",
                    fieldLabel: "Тип вулиці",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "streetTypeAddRValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_streetType",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "streetTypeAddRValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_streetType",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "streetAddRCond",
                    fieldLabel: "Вулиця",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "streetAddRValue",
                    fieldLabel: "",
                    displayField: 'street',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_localStreet",
                      method: "select",
                      fieldList: ['ID', 'street'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "streetAddRValues",
                    displayField: "street",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_localStreet",
                        method: "select",
                        fieldList: ['ID', 'street'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "houseNumAddRCond",
                    fieldLabel: "Будинок",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "houseNumAddRValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "flatNumAddRCond",
                    fieldLabel: "Квартира",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "flatNumAddRValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "postIndexCond",
                    fieldLabel: "Індекс",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "postIndexValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              }
            ]
          },
          {
            itemId: "addrLTab",
            title: 'Адреса проживання',
            layout: {
              type: 'vbox',
              pack: 'center',
              align: 'top'
            },
            defaults: {
              layout: {
                type: "hbox",
                pack: "center",
                align: "middle"
              }
            },
            items: [
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "areaAddLCond",
                    fieldLabel: "Область",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "areaAddLValue",
                    fieldLabel: "",
                    displayField: 'areaName',
                    valueField: 'areaName',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_ngoDict",
                      method: "select",
                      fieldList: ['areaName'],
                      orderList: {areaName: {expression: "areaName", order: 'asc'}},
                      groupList: ["areaName"]
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "areaAddLValues",
                    displayField: "areaName",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "areaName",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_ngoDict",
                        method: "select",
                        fieldList: ['areaName'],
                        orderList: {areaName: {expression: "areaName", order: 'asc'}},
                        groupList: ["areaName"]
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "settlementAddLCond",
                    fieldLabel: "Населений пункт",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "settlementAddLValue",
                    fieldLabel: "",
                    displayField: 'governmentFullName',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_settlementDict",
                      method: "select",
                      fieldList: ['ID', 'governmentFullName'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "settlementAddLValues",
                    displayField: "governmentFullName",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_settlementDict",
                        method: "select",
                        fieldList: ['ID', 'governmentFullName'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "streetTypeAddLCond",
                    fieldLabel: "Тип вулиці",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "streetTypeAddLValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_streetType",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "streetTypeAddLValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_streetType",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "streetAddLCond",
                    fieldLabel: "Вулиця",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "streetAddLValue",
                    fieldLabel: "",
                    displayField: 'street',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_localStreet",
                      method: "select",
                      fieldList: ['ID', 'street'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "streetAddLValues",
                    displayField: "street",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_localStreet",
                        method: "select",
                        fieldList: ['ID', 'street'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "houseNumAddLCond",
                    fieldLabel: "Будинок",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "houseNumAddLValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "flatNumAddLCond",
                    fieldLabel: "Квартира",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "flatNumAddLValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              }
            ]
          },
          {
            itemId: "militaryTab",
            title: 'Військовий облік',
            layout: {
              type: 'vbox',
              align: 'top'
            },
            defaults: {
              layout: {
                type: "hbox",
                pack: "center",
                align: "middle"
              }
            },
            items: [
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "accBoardCond",
                    fieldLabel: "В/облік. стіл",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "accBoardValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "militaryGroupCond",
                    fieldLabel: "Група обліку",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "militaryGroupValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_militaryGroup",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "militaryGroupValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_militaryGroup",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "militaryRankCond",
                    fieldLabel: "Військове звання",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "militaryRankValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_militaryRank",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "militaryRankValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_militaryRank",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "combatantCond",
                    fieldLabel: "Стройовий чи ні",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "combatantValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'code',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "ubm_enum",
                      method: "select",
                      fieldList: ['ID', 'eGroup', 'name', 'sortOrder', 'code'],
                      whereList: {
                        byGroup: {
                          expression: '[eGroup]',
                          condition: 'equal',
                          values: {state: 'combatant'}
                        }
                      },
                      orderList: {sortOrder: {expression: "sortOrder", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "combatantValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "code",
                    ubRequest: {
                      entity: "ubm_enum",
                      method: "select",
                      fieldList: ['ID', 'eGroup', 'name', 'sortOrder', 'code'],
                      whereList: {
                        byGroup: {
                          expression: '[eGroup]',
                          condition: 'equal',
                          values: {state: 'combatant'}
                        }
                      },
                      orderList: {sortOrder: {expression: "sortOrder", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "specializationCond",
                    fieldLabel: "Цивільна спец-ть",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "specializationValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "admitDateCond",
                    fieldLabel: "Дата визнання",
                    displayField: 'name',
                    forceSelection: true,
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    type: 'date',
                    store: me.dateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'period',
                    listeners: {
                      change: setDateCondChange
                    },
                    getSearchValue: getDateSearchValue,
                    customValidateFn: periodRangeValidate,
                    getSearchText: getDateDisplayValue
                  },
                  {
                    xtype: 'datefield',
                    itemId: "admitDateValueFrom",
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: 'datefield',
                    itemId: "admitDateValueTo",
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "commissionCond",
                    fieldLabel: "Комісією при",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "commissionValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "admittedCond",
                    fieldLabel: "визнаний",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "admittedValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_militaryAdmit",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "admittedValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_militaryAdmit",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "citizenCond",
                    fieldLabel: "За гр.",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "citizenValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "numCond",
                    fieldLabel: "№",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'numberfield',
                    itemId: "numValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "reviewDateCond",
                    fieldLabel: "Підлягає повторному огляду",
                    displayField: 'name',
                    forceSelection: true,
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    type: 'date',
                    store: me.dateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'period',
                    listeners: {
                      change: setDateCondChange
                    },
                    getSearchValue: getDateSearchValue,
                    customValidateFn: periodRangeValidate,
                    getSearchText: getDateDisplayValue
                  },
                  {
                    xtype: 'datefield',
                    itemId: "reviewDateValueFrom",
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: 'datefield',
                    itemId: "reviewDateValueTo",
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "military_typeCond",
                    fieldLabel: "Тип",
                    displayField: 'name',
                    valueField: 'abbr',
                    forceSelection: true,
                    width: 260,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "military_typeValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'code',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "ubm_enum",
                      method: "select",
                      fieldList: ['ID', 'eGroup', 'code', 'name'],
                      whereList: {
                        byEGroup: {
                          expression: '[eGroup]',
                          condition: 'equal',
                          values: {eGroup: 'IN_OUT_TYPE'},
                          orderList: {name: {expression: "name", order: 'asc'}}
                        }
                      }
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "military_typeValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    valueField: 'code',
                    width: 213,
                    minWidth: 213,
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "ubm_enum",
                        method: "select",
                        fieldList: ['ID', 'eGroup', 'code', 'name'],
                        whereList: {
                          byEGroup: {
                            expression: '[eGroup]',
                            condition: 'equal',
                            values: {eGroup: 'IN_OUT_TYPE'},
                            orderList: {name: {expression: "name", order: 'asc'}}
                          }
                        }
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "military_inOutDateCond",
                    fieldLabel: "Дата держреєстрації",
                    displayField: 'name',
                    forceSelection: true,
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    type: 'date',
                    store: me.dateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'period',
                    listeners: {
                      change: setDateCondChange
                    },
                    getSearchValue: getDateSearchValue,
                    customValidateFn: periodRangeValidate,
                    getSearchText: getDateDisplayValue
                  },
                  {
                    xtype: 'datefield',
                    itemId: "military_inOutDateValueFrom",
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: 'datefield',
                    itemId: "military_inOutDateValueTo",
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "military_whereFromCond",
                    fieldLabel: "Куди/Звідки",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "military_whereFromValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              }
            ]
          },
          {
            itemId: "regInfoFromTab",
            title: 'Звідки прибув',
            layout: {
              type: 'vbox',
              align: 'top'
            },
            defaults: {
              layout: {
                type: "hbox",
                pack: "center",
                align: "middle"
              }
            },
            items: [
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoFrom_removeDateCond",
                    fieldLabel: "Дата зняття з реєстрації попереднього місця проживання/ перебування",
                    displayField: 'name',
                    forceSelection: true,
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    type: 'date',
                    store: me.dateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'period',
                    listeners: {
                      change: setDateCondChange
                    },
                    getSearchValue: getDateSearchValue,
                    customValidateFn: periodRangeValidate,
                    getSearchText: getDateDisplayValue
                  },
                  {
                    xtype: 'datefield',
                    itemId: "regInfoFrom_removeDateValueFrom",
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: 'datefield',
                    itemId: "regInfoFrom_removeDateValueTo",
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoFrom_areaCond",
                    fieldLabel: "Область",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoFrom_areaValue",
                    fieldLabel: "",
                    displayField: 'areaName',
                    valueField: 'areaName',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_ngoDict",
                      method: "select",
                      fieldList: ['areaName'],
                      orderList: {areaName: {expression: "areaName", order: 'asc'}},
                      groupList: ["areaName"]
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoFrom_areaValues",
                    displayField: "areaName",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "areaName",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_ngoDict",
                        method: "select",
                        fieldList: ['areaName'],
                        orderList: {areaName: {expression: "areaName", order: 'asc'}},
                        groupList: ["areaName"]
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoFrom_regionCond",
                    fieldLabel: "Район",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoFrom_regionValue",
                    fieldLabel: "",
                    displayField: 'regionName',
                    valueField: 'regionName',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_ngoDict",
                      method: "select",
                      fieldList: ['regionName'],
                      orderList: {regionName: {expression: "regionName", order: 'asc'}},
                      groupList: ["regionName"]
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoFrom_regionValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_ngoDict",
                        method: "select",
                        fieldList: ['regionName'],
                        orderList: {regionName: {expression: "regionName", order: 'asc'}},
                        groupList: ["regionName"]
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoFrom_settlementCond",
                    fieldLabel: "Населений пункт",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoFrom_settlementValue",
                    fieldLabel: "",
                    displayField: 'governmentFullName',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_settlementDict",
                      method: "select",
                      fieldList: ['ID', 'governmentFullName'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoFrom_settlementValues",
                    displayField: "governmentFullName",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_settlementDict",
                        method: "select",
                        fieldList: ['ID', 'governmentFullName'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoFrom_streetTypeCond",
                    fieldLabel: "Тип вулиці",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoFrom_streetTypeValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_streetType",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoFrom_streetTypeValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_streetType",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoFrom_streetCond",
                    fieldLabel: "Вулиця",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoFrom_streetValue",
                    fieldLabel: "",
                    displayField: 'street',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_localStreet",
                      method: "select",
                      fieldList: ['ID', 'street'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoFrom_streetValues",
                    displayField: "street",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_localStreet",
                        method: "select",
                        fieldList: ['ID', 'street'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoFrom_houseNumCond",
                    fieldLabel: "Будинок",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "regInfoFrom_houseNumValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoFrom_flatNumCond",
                    fieldLabel: "Квартира",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "regInfoFrom_flatNumValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoFrom_postIndexCond",
                    fieldLabel: "Індекс",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "regInfoFrom_postIndexValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              }
            ]
          },
          {
            itemId: "regInfoCurrTab",
            title: 'Поточна реєстрація',
            layout: {
              type: 'vbox',
              align: 'top'
            },
            defaults: {
              layout: {
                type: "hbox",
                pack: "center",
                align: "middle"
              }
            },
            items: [
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_stateCond",
                    fieldLabel: "Тип",
                    displayField: 'name',
                    valueField: 'abbr',
                    forceSelection: true,
                    width: 260,
                    minWidth: 260,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    itemId: "regInfoCurr_stateValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'code',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "ubm_enum",
                      method: "select",
                      fieldList: ['ID', 'eGroup', 'code', 'name'],
                      whereList: {
                        byEGroup: {
                          expression: '[eGroup]',
                          condition: 'equal',
                          values: {eGroup: 'REC_STATE'},
                          orderList: {name: {expression: "name", order: 'asc'}}
                        }
                      }
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_stateValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    valueField: 'code',
                    width: 213,
                    minWidth: 213,
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "ubm_enum",
                        method: "select",
                        fieldList: ['ID', 'eGroup', 'code', 'name'],
                        whereList: {
                          byEGroup: {
                            expression: '[eGroup]',
                            condition: 'equal',
                            values: {eGroup: 'REC_STATE'},
                            orderList: {name: {expression: "name", order: 'asc'}}
                          }
                        }
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_regUnitCond",
                    fieldLabel: "Орган реєстрації",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoCurr_regUnitValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "inv_regUnit",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_regUnitValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "inv_regUnit",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_regDateCond",
                    fieldLabel: "Дата реєстрації",
                    displayField: 'name',
                    forceSelection: true,
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    type: 'date',
                    store: me.dateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'period',
                    listeners: {
                      change: setDateCondChange
                    },
                    getSearchValue: getDateSearchValue,
                    customValidateFn: periodRangeValidate,
                    getSearchText: getDateDisplayValue
                  },
                  {
                    xtype: 'datefield',
                    itemId: "regInfoCurr_regDateValueFrom",
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: 'datefield',
                    itemId: "regInfoCurr_regDateValueTo",
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_areaCond",
                    fieldLabel: "Область",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoCurr_areaValue",
                    fieldLabel: "",
                    displayField: 'areaName',
                    valueField: 'areaName',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_ngoDict",
                      method: "select",
                      fieldList: ['areaName'],
                      orderList: {areaName: {expression: "areaName", order: 'asc'}},
                      groupList: ["areaName"]
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_areaValues",
                    displayField: "areaName",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "areaName",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_ngoDict",
                        method: "select",
                        fieldList: ['areaName'],
                        orderList: {areaName: {expression: "areaName", order: 'asc'}},
                        groupList: ["areaName"]
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_regionCond",
                    fieldLabel: "Район",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoCurr_regionValue",
                    fieldLabel: "",
                    displayField: 'regionName',
                    valueField: 'regionName',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_ngoDict",
                      method: "select",
                      fieldList: ['regionName'],
                      orderList: {regionName: {expression: "regionName", order: 'asc'}},
                      groupList: ["regionName"]
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_regionValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_ngoDict",
                        method: "select",
                        fieldList: ['regionName'],
                        orderList: {regionName: {expression: "regionName", order: 'asc'}},
                        groupList: ["regionName"]
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_settlementCond",
                    fieldLabel: "Населений пункт",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoCurr_settlementValue",
                    fieldLabel: "",
                    displayField: 'governmentFullName',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_settlementDict",
                      method: "select",
                      fieldList: ['ID', 'governmentFullName'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_settlementValues",
                    displayField: "governmentFullName",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_settlementDict",
                        method: "select",
                        fieldList: ['ID', 'governmentFullName'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_streetTypeCond",
                    fieldLabel: "Тип вулиці",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoCurr_streetTypeValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_streetType",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_streetTypeValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_streetType",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_streetCond",
                    fieldLabel: "Вулиця",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoCurr_streetValue",
                    fieldLabel: "",
                    displayField: 'street',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_localStreet",
                      method: "select",
                      fieldList: ['ID', 'street'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_streetValues",
                    displayField: "street",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_localStreet",
                        method: "select",
                        fieldList: ['ID', 'street'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_houseNumCond",
                    fieldLabel: "Будинок",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "regInfoCurr_houseNumValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_flatNumCond",
                    fieldLabel: "Квартира",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "regInfoCurr_flatNumValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_postIndexCond",
                    fieldLabel: "Індекс",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "regInfoCurr_postIndexValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_regReasonCond",
                    fieldLabel: "Підстава для реєстрації",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoCurr_regReasonValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "comm_regReason",
                      method: "select",
                      fieldList: ['name'],
                      orderList: {name: {expression: "name", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_regReasonValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "comm_regReason",
                        method: "select",
                        fieldList: ['name'],
                        orderList: {name: {expression: "name", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              }
            ]
          },
          {
            itemId: "regCurrDocTab",
            title: 'Документи для реєстрації',
            layout: {
              type: 'vbox',
              align: 'top'
            },
            defaults: {
              layout: {
                type: "hbox",
                pack: "center",
                align: "middle"
              }
            },
            items: [
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_docTypeCond",
                    fieldLabel: "Вид документа",
                    displayField: 'name',
                    valueField: 'abbr',
                    forceSelection: true,
                    width: 260,
                    minWidth: 260,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    itemId: "regInfoCurr_docTypeValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'code',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "ubm_enum",
                      method: "select",
                      fieldList: ['ID', 'eGroup', 'code', 'name'],
                      whereList: {
                        byEGroup: {
                          expression: '[eGroup]',
                          condition: 'equal',
                          values: {eGroup: 'DOC_TYPE'},
                          orderList: {name: {expression: "name", order: 'asc'}}
                        }
                      }
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_docTypeValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    valueField: 'code',
                    width: 213,
                    minWidth: 213,
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "ubm_enum",
                        method: "select",
                        fieldList: ['ID', 'eGroup', 'code', 'name'],
                        whereList: {
                          byEGroup: {
                            expression: '[eGroup]',
                            condition: 'equal',
                            values: {eGroup: 'DOC_TYPE'},
                            orderList: {name: {expression: "name", order: 'asc'}}
                          }
                        }
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_seriesCond",
                    fieldLabel: "Серія",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "regInfoCurr_seriesValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_numCond",
                    fieldLabel: "Номер",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "regInfoCurr_numValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_issueDateCond",
                    fieldLabel: "Дата видачі",
                    displayField: 'name',
                    forceSelection: true,
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    type: 'date',
                    store: me.dateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'period',
                    listeners: {
                      change: setDateCondChange
                    },
                    getSearchValue: getDateSearchValue,
                    customValidateFn: periodRangeValidate,
                    getSearchText: getDateDisplayValue
                  },
                  {
                    xtype: 'datefield',
                    itemId: "regInfoCurr_issueDateValueFrom",
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: 'datefield',
                    itemId: "regInfoCurr_issueDateValueTo",
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_docRegUnitCond",
                    fieldLabel: "Ким видано",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoCurr_docRegUnitValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "inv_regUnit",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_docRegUnitValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "inv_regUnit",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_validToCond",
                    fieldLabel: "Дійсний до",
                    displayField: 'name',
                    forceSelection: true,
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    type: 'date',
                    store: me.dateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'period',
                    listeners: {
                      change: setDateCondChange
                    },
                    getSearchValue: getDateSearchValue,
                    customValidateFn: periodRangeValidate,
                    getSearchText: getDateDisplayValue
                  },
                  {
                    xtype: 'datefield',
                    itemId: "regInfoCurr_validToValueFrom",
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: 'datefield',
                    itemId: "regInfoCurr_validToValueTo",
                    margin: '5, 10, 0, 10'
                  }
                ]
              }
            ]
          },
          {
            itemId: "regCurrReasonTab",
            title: 'Причина скасування',
            layout: {
              type: 'vbox',
              align: 'top'
            },
            defaults: {
              layout: {
                type: "hbox",
                pack: "center",
                align: "middle"
              }
            },
            items: [
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_cancelDateCond",
                    fieldLabel: "Дата скасування",
                    displayField: 'name',
                    forceSelection: true,
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    type: 'date',
                    store: me.dateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'period',
                    listeners: {
                      change: setDateCondChange
                    },
                    getSearchValue: getDateSearchValue,
                    customValidateFn: periodRangeValidate,
                    getSearchText: getDateDisplayValue
                  },
                  {
                    xtype: 'datefield',
                    itemId: "regInfoCurr_cancelDateValueFrom",
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: 'datefield',
                    itemId: "regInfoCurr_cancelDateValueTo",
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_cancelReasonCond",
                    fieldLabel: "Причина",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoCurr_cancelReasonValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "comm_cancelReason",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_cancelReasonValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "comm_cancelReason",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              }
            ]
          },
          {
            itemId: "regCurrCancelTab",
            title: 'Зняття з реєстрації',
            layout: {
              type: 'vbox',
              align: 'top'
            },
            defaults: {
              layout: {
                type: "hbox",
                pack: "center",
                align: "middle"
              }
            },
            items: [
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_removeDateCond",
                    fieldLabel: "Дата зняття з реєстрації попереднього місця проживання/ перебування",
                    displayField: 'name',
                    forceSelection: true,
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    type: 'date',
                    store: me.dateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'period',
                    listeners: {
                      change: setDateCondChange
                    },
                    getSearchValue: getDateSearchValue,
                    customValidateFn: periodRangeValidate,
                    getSearchText: getDateDisplayValue
                  },
                  {
                    xtype: 'datefield',
                    itemId: "regInfoCurr_removeDateValueFrom",
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: 'datefield',
                    itemId: "regInfoCurr_removeDateValueTo",
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_rRegUnitCond",
                    fieldLabel: "Ким знято з реєстрації",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoCurr_rRegUnitValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "inv_regUnit",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_rRegUnitValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "inv_regUnit",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_rReasonCond",
                    fieldLabel: "Причина",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoCurr_rReasonValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "comm_cancelReason",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_rReasonValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "comm_cancelReason",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              }
            ]
          },
          {
            itemId: "regCurrCancelDocTab",
            title: 'Документи для зняття з реєстрації',
            layout: {
              type: 'vbox',
              align: 'top'
            },
            defaults: {
              layout: {
                type: "hbox",
                pack: "center",
                align: "middle"
              }
            },
            items: [
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_rDocTypeCond",
                    fieldLabel: "Вид документа",
                    displayField: 'name',
                    valueField: 'abbr',
                    forceSelection: true,
                    width: 260,
                    minWidth: 260,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    itemId: "regInfoCurr_rDocTypeValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'code',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "ubm_enum",
                      method: "select",
                      fieldList: ['ID', 'eGroup', 'code', 'name'],
                      whereList: {
                        byEGroup: {
                          expression: '[eGroup]',
                          condition: 'equal',
                          values: {eGroup: 'DOC_TYPE'},
                          orderList: {name: {expression: "name", order: 'asc'}}
                        }
                      }
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_rDocTypeValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    valueField: 'code',
                    width: 213,
                    minWidth: 213,
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "ubm_enum",
                        method: "select",
                        fieldList: ['ID', 'eGroup', 'code', 'name'],
                        whereList: {
                          byEGroup: {
                            expression: '[eGroup]',
                            condition: 'equal',
                            values: {eGroup: 'DOC_TYPE'},
                            orderList: {name: {expression: "name", order: 'asc'}}
                          }
                        }
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_rSeriesCond",
                    fieldLabel: "Серія",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "regInfoCurr_rSeriesValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_rNumCond",
                    fieldLabel: "Номер",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "regInfoCurr_rNumValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_rIssueDateCond",
                    fieldLabel: "Дата видачі",
                    displayField: 'name',
                    forceSelection: true,
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    type: 'date',
                    store: me.dateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'period',
                    listeners: {
                      change: setDateCondChange
                    },
                    getSearchValue: getDateSearchValue,
                    customValidateFn: periodRangeValidate,
                    getSearchText: getDateDisplayValue
                  },
                  {
                    xtype: 'datefield',
                    itemId: "regInfoCurr_rIssueDateValueFrom",
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: 'datefield',
                    itemId: "regInfoCurr_rIssueDateValueTo",
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_rDocRegUnitCond",
                    fieldLabel: "Ким видано",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoCurr_rDocRegUnitValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "inv_regUnit",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_rDocRegUnitValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "inv_regUnit",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_rValidToCond",
                    fieldLabel: "Дійсний до",
                    displayField: 'name',
                    forceSelection: true,
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    type: 'date',
                    store: me.dateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'period',
                    listeners: {
                      change: setDateCondChange
                    },
                    getSearchValue: getDateSearchValue,
                    customValidateFn: periodRangeValidate,
                    getSearchText: getDateDisplayValue
                  },
                  {
                    xtype: 'datefield',
                    itemId: "regInfoCurr_rValidToValueFrom",
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: 'datefield',
                    itemId: "regInfoCurr_rValidToValueTo",
                    margin: '5, 10, 0, 10'
                  }
                ]
              }
            ]
          },
          {
            itemId: "regInfoToTab",
            title: 'Куди вибув',
            layout: {
              type: 'vbox',
              align: 'top'
            },
            defaults: {
              layout: {
                type: "hbox",
                pack: "center",
                align: "middle"
              }
            },
            items: [
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_rCountryCond",
                    fieldLabel: "Країна",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoCurr_rCountryValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "inv_countryDict",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_rCountryValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "inv_countryDict",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_rAreaCond",
                    fieldLabel: "Область",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoCurr_rAreaValue",
                    fieldLabel: "",
                    displayField: 'areaName',
                    valueField: 'areaName',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_ngoDict",
                      method: "select",
                      fieldList: ['areaName'],
                      orderList: {areaName: {expression: "areaName", order: 'asc'}},
                      groupList: ["areaName"]
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_rAreaValues",
                    displayField: "areaName",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "areaName",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_ngoDict",
                        method: "select",
                        fieldList: ['areaName'],
                        orderList: {areaName: {expression: "areaName", order: 'asc'}},
                        groupList: ["areaName"]
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_rRegionCond",
                    fieldLabel: "Район",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoCurr_rRegionValue",
                    fieldLabel: "",
                    displayField: 'regionName',
                    valueField: 'regionName',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_ngoDict",
                      method: "select",
                      fieldList: ['regionName'],
                      orderList: {regionName: {expression: "regionName", order: 'asc'}},
                      groupList: ["regionName"]
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_rRegionValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_ngoDict",
                        method: "select",
                        fieldList: ['regionName'],
                        orderList: {regionName: {expression: "regionName", order: 'asc'}},
                        groupList: ["regionName"]
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_rSettlementCond",
                    fieldLabel: "Населений пункт",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoCurr_rSettlementValue",
                    fieldLabel: "",
                    displayField: 'governmentFullName',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_settlementDict",
                      method: "select",
                      fieldList: ['ID', 'governmentFullName'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_rSettlementValues",
                    displayField: "governmentFullName",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_settlementDict",
                        method: "select",
                        fieldList: ['ID', 'governmentFullName'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_rStreetTypeCond",
                    fieldLabel: "Тип вулиці",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoCurr_rStreetTypeValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_streetType",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_rStreetTypeValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_streetType",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_rStreetCond",
                    fieldLabel: "Вулиця",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "regInfoCurr_rStreetValue",
                    fieldLabel: "",
                    displayField: 'street',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_localStreet",
                      method: "select",
                      fieldList: ['ID', 'street'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "regInfoCurr_rStreetValues",
                    displayField: "street",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_localStreet",
                        method: "select",
                        fieldList: ['ID', 'street'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_rHouseNumCond",
                    fieldLabel: "Будинок",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "regInfoCurr_rHouseNumValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_rFlatNumCond",
                    fieldLabel: "Квартира",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "regInfoCurr_rFlatNumValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_rPostIndexCond",
                    fieldLabel: "Індекс",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "regInfoCurr_rPostIndexValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "regInfoCurr_rLivePlaceCond",
                    fieldLabel: "Місце проживання",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "regInfoCurr_rLivePlaceValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }
                ]
              }
            ]
          },
          {
            itemId: "addInfoTab",
            title: 'Додаткова інформація',
            layout: {
              type: 'vbox',
              align: 'top'
            },
            defaults: {
              layout: {
                type: "hbox",
                pack: "center",
                align: "middle"
              }
            },
            items: [
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "authorizedPersonIDCond",
                    fieldLabel: "ПІБ уповноваженої особи",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "authorizedPersonIDValue",
                    fieldLabel: "",
                    displayField: 'fullName',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "inv_payers",
                      method: "select",
                      fieldList: ['ID', 'fullName'],
                      orderList: {ID: {expression: "ID", order: 'asc'}},
                      whereList: {
                        byType: {
                          expression: '[personType]',
                          condition: '=',
                          values: {personType: 'PHYSICAL'}
                        }
                      }
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "authorizedPersonIDValues",
                    displayField: "fullName",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "inv_payers",
                        method: "select",
                        fieldList: ['ID', 'fullName'],
                        orderList: {ID: {expression: "ID", order: 'asc'}},
                        whereList: {
                          byType: {
                            expression: '[personType]',
                            condition: '=',
                            values: {personType: 'PHYSICAL'}
                          }
                        }
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "personStateCond",
                    fieldLabel: "Статус особи",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "personStateValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "inv_personState",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "personStateValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "inv_personState",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "cognationInfo_cognationCond",
                    fieldLabel: "Родинна приналежність",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "cognationInfo_cognationValue",
                    fieldLabel: "",
                    displayField: 'name',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "pgo_cognation",
                      method: "select",
                      fieldList: ['ID', 'name'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "cognationInfo_cognationValues",
                    displayField: "name",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "pgo_cognation",
                        method: "select",
                        fieldList: ['ID', 'name'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              },
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "cognationInfo_fullNameCond",
                    fieldLabel: "визнаний",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.stateStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: 'one',
                    listeners: {
                      change: setComboChanged
                    },
                    getSearchValue: getComboSearchValue,
                    getSearchText: getComboDisplayValue
                  },
                  {
                    xtype: 'ubcombobox',
                    disableContextMenu: true,
                    itemId: "cognationInfo_fullNameValue",
                    fieldLabel: "",
                    displayField: 'fullName',
                    valueField: 'ID',
                    flex: 1,
                    width: 213,
                    minWidth: 213,
                    ubRequest: {
                      entity: "inv_payers",
                      method: "select",
                      fieldList: ['ID', 'fullName'],
                      orderList: {ID: {expression: "ID", order: 'asc'}}
                    },
                    margin: '5, 10, 0, 10'
                  },
                  {
                    xtype: "ubboxselect",
                    itemId: "cognationInfo_fullNameValues",
                    displayField: "fullName",
                    multiSelect: true,
                    hidden: true,
                    width: 213,
                    minWidth: 213,
                    valueField: "ID",
                    store: Ext.create('UB.ux.data.UBStore', {
                      ubRequest: {
                        entity: "inv_payers",
                        method: "select",
                        fieldList: ['ID', 'fullName'],
                        orderList: {ID: {expression: "ID", order: 'asc'}}
                      }
                    }),
                    margin: '5, 10, 0, 10'
                  }
                ]
              }
            ]
          },
          {
            itemId: "attachTab",
            title: 'Документи',
            layout: {
              type: 'vbox',
              align: 'top'
            },
            defaults: {
              layout: {
                type: "hbox",
                pack: "center",
                align: "middle"
              }
            },
            items: [
              {
                items: [
                  {
                    xtype: 'combobox',
                    itemId: "commAttach_nameCond",
                    fieldLabel: "Ім’я файлу",
                    displayField: 'name',
                    valueField: 'abbr',
                    width: 260,
                    minWidth: 260,
                    forceSelection: true,
                    store: me.mainStore,
                    labelWidth: 110,
                    margin: '5, 10, 0, 10',
                    defaultValue: "startWith",
                    listeners: {
                      change: setTextChanged
                    },
                    getSearchValue: getTextSearchValue,
                    getSearchText: getTextDisplayValue
                  },
                  {
                    xtype: 'textfield',
                    itemId: "commAttach_nameValue",
                    maxLength: 50,
                    width: 213,
                    minWidth: 213,
                    margin: '5, 10, 0, 10',
                    flex: 1
                  }

                ]
              }
            ]
          },
        ]
      }
    ];

    me.dockedItems = [{
      xtype: 'toolbar',
      dock: 'bottom',
      padding: '0 0 0 5',
      layout: {type: 'hbox', pack: 'end', align: 'middle'},
      items: [{
        xtype: 'tbspacer',
        flex: 1
      }, {
        xtype: 'button',
        text: UB.i18n('clear'),
        iconCls: 'fa fa-eraser',
        minWidth: 75,
        margin: '5 5 0 5',
        handler: function () {
          me.revertToDefaults();
        }
      }, {
        xtype: 'button',
        text: UB.i18n('cancel'),
        iconCls: 'fa fa-times',
        minWidth: 75,
        margin: '5 5 0 5',
        handler: function () {
          me.up().close();
        }
      }, {
        xtype: 'button',
        itemId: 'searchBtn',
        iconCls: 'fa fa-search',
        text: UB.i18n('search'),
        margin: '5 5 0 5',
        minWidth: 75,
        handler: function () {
          me.search();
        }
      }]
    }];
    me.autoScroll = true;

    this.callParent(arguments);

    me.ensureCmp();
    var f = false;
    me.on('afterrender', function () {
      if (!f) {
        me.revertToDefaults();

        me.up().on('beforeClose', me.onCloseW);
        me.shortcutCode = me.tempShortcutCode;

        me.getEl().on('keydown', function (e) {
          if (e.getKey() === Ext.EventObject.ENTER) {
            me.search();
          }
        });

        f = true;
      }
    });
  },

  revertToDefaults: function () {
    var me = this;
    var mask = new Ext.LoadMask(me, {msg: "Please wait..."});
    mask.show();

    me.supperessMessages = true;
    try {

      me.treeIDItems = [];
      me.treeTextItems = [];

      var asyncSetters = [];
      _.forOwn(me.cmp, function (value, key) {
        if (value.defaultFn) {
          asyncSetters.push(value.defaultFn());
        } else if (value.defaultValue !== undefined) {
          value.setValue(value.defaultValue);
        } else {
          value.setValue(null);
        }
      });

      return Promise.all(asyncSetters).then(function () {
        mask.hide();
      });
    } finally {
      delete me.supperessMessages;
    }
  },

  ensureCmp: function () {
    var me = this;

    if (!me.cmp) {
      me.cmp = {}
      let code
      me.getForm()
        .getFields()
        .items.forEach(item => {
        if (/.*[Aa]rea.*Value(s*)/.test(item.itemId) && /ubboxselect|ubcombobox/.test(item.xtype)) {
          item.store.ubRequest.fieldList = ['areaName']
        }
        if (/.*[Rr]egion.*Value(s*)/.test(item.itemId) && /ubboxselect|ubcombobox/.test(item.xtype)) {
          item.store.ubRequest.fieldList = ['regionName']
        }
        code = item.itemId.replace('_', '.')
        item.searchControlCode = code
        me.cmp[code] = item
      })
    }
  },

  search: function () {
    var me = this,
      formCode = me.isComm ? 'inv_payers-comm' : 'inv_payers-pgo';
    var isValid = true;
    _.forOwn(me.cmp, function (value, key) {
      if (value.validate)
        isValid = isValid && value.validate();
      if (value.customValidateFn)
        isValid = isValid && value.customValidateFn(value);
    });
    if (!isValid) {
      $App.dialogError("Поля заповнені некоректно.", "Помилка");
      return false;
    }

    var searchFilters = {};
    _.forOwn(me.cmp, function (value, key) {
      if (value.getSearchValue) {
        var val = value.getSearchValue(value);
        if (val !== undefined) {
          _.forEach(["Cond", "Value", "Values", "ValueFrom", "ValueTo"], function (suffix) {
            var i = key.lastIndexOf(suffix);
            if (i >= 0) {
              key = key.substr(0, i);
              return false;
            }
          });
          searchFilters[key] = val;
        }
      }
    });

    var displayFilters = {};
    _.forOwn(me.cmp, function (value, key) {
      if (value.getSearchText) {
        var val = value.getSearchText(value);
        if (val !== undefined) {
          _.forEach(["Cond", "Value", "Values", "ValueFrom", "ValueTo"], function (suffix) {
            var i = key.lastIndexOf(suffix);
            if (i >= 0) {
              key = key.substr(0, i);
              return false;
            }
          });
          displayFilters[key] = val;
        }
      }
    });

    var rootEntity = "inv_payers";

    var params = [
      {
        entity: rootEntity,
        method: "selectSearch",
        fieldList: [
          {"name": "ID", "visibility": false},
          {"name": "fullName", description: "ПІБ особи"},
          {"name": "birthDate", description: "Дата народження"},
          {"name": "idnCode", description: "РНОКПП"},
          {"name": "passportSeriesAndNumber", description: "Серія/номер паспорта.Серія"},
          {"name": "idCardNumber", description: "№ паспорта нового зразка"},
          {"name": "areaAddR", description: "Область"},
          {"name": "regionAddR", description: "Район"},
          {"name": "settlementAddR", description: "Населений пункт"},
          {"name": "streetAddR", description: "Вулиця"},
          {"name": "houseNumAddR", description: "Будинок"},
          {"name": "flatNumAddR", description: "Квартира"}
        ],
        searchParams: searchFilters,
        whereList: {
          byPersonType: {
            expression: "[personType]",
            condition: "=",
            values: {personType: 'PHYSICAL'}
          }
        }
      }
    ];


    var config = {
      cmdType: 'showList',
      entity: rootEntity,
      cmdData: {
        params: params
      },
      title: 'Реєстр громад',
      cmpInitConfig: {
        toolbarActionList: ["addNew", "refresh", "del"],
        sender: me,
        hideActions: ["showPreview", "showDetail", "audit", "addNewByCurrent"],
        //hideMenuAllActions: true,
        listeners: {
          afterrender: function () {
            var me = this;
            var grid = this;

            var buildFilter = function (labelText) {
              me.filterBar2.add(
                {
                  xtype: 'button',
                  text: labelText,
                  cls: 'ub-btn-ftr-disabled',
                  handler: function () {
                    if (grid.sender.up()) {
                      grid.sender.isOpenSecondTime = true;
                      grid.sender.senderGrid = grid;

                      grid.sender.up().show();
                    }
                  }
                }
              )
            };

            me.filterBar2 = Ext.create('Ext.toolbar.Toolbar', {
              cls: 'ub-multi-filter',
              layout: {
                overflowHandler: 'Menu'
              },
              bodyStyle: 'background: none;',
              dock: 'top',
              enableOverflow: true,
              border: 0,
              margin: 0,
              padding: 1,
              flex: 1,
              items: [
                {
                  xtype: 'button',
                  style: 'text-weight: bolder',
                  margin: '0 0 0 0',
                  tooltip: UB.i18n('clear'),
                  text: ' <b>&#x2716;</b>',
                  handler: function () {
                    if (grid.sender) {
                      grid.sender.isOpenSecondTime = true;
                      grid.sender.senderGrid = grid;
                      grid.sender.revertToDefaults();
                      grid.sender.search();
                    }
                  }
                }
              ]
            });

            _.forOwn(displayFilters, function (textLabel) {
              buildFilter(textLabel);
            });
            me.addDocked(me.filterBar2);
          },
          beforeclose: function () {
            var grid = this;
            if (grid.preventFormClose)
              return;
            if (grid.sender.up())
              grid.sender.up().close();
          }
        },
        onAddNew: function () {
          $App.doCommand({
            cmdType: "showForm",
            formCode: formCode,
            entityName: 'inv_payers',
            entity: 'inv_payers',
            target: $App.viewport.centralPanel,
            tabId: "payer" + Ext.id(),
            sender: this,
            initialFieldValues: {
              personType: 'PHYSICAL'
            }
          });
        },
        onDeterminateForm: function () {
          var me = this,
            form = me.up("form"),
            store = me.getStore(),
            record = store.getById(me.selectedRecordID),
            entityName = "inv_payers",
            instID = record ? record.get("ID") : undefined;
          if (instID) {
            return {
              formCode: formCode,
              entityName: entityName,
              instanceID: instID,
              cmpInitConfig: {
                sender: me
              }
            }
          } else {
            return {
              formCode: formCode,
              entityName: entityName,
              cmpInitConfig: {
                sender: me
              }
            }
          }

        },
        addBaseDockedItems: function () {
          let me = this;
          me.__proto__.addBaseDockedItems.apply(this, arguments);

          me.dockedItems[0].items.splice(3, 0, {
            xtype: 'button',
            margin: "0, 0, 0, 2",
            itemId: 'reportBtn',
            disabled: !ADM.AccessManager.checkAccess('RTG_05_01_03'),
            text: 'Довідка про склад сім\'ї',
            handler: function () {
              let selection = me.getSelectionModel().getSelection()[0];
              if (!selection) {
                $App.dialogError(`Необхідно обрати запис.`);
                return;
              }
              var win = Ext.create("UB.view.BaseWindow", {
                autoShow: true,
                title: 'Форма задання параметрів',
                border: 0,
                layout: 'fit',
                modal: true,
                items: [
                  {
                    xtype: 'form',
                    layout: {
                      type: 'vbox',
                      align: 'stretch'
                    },
                    items: [
                      {
                        xtype: 'textfield',
                        fieldLabel: 'Видана гр.',
                        itemId: 'issued',
                        allowBlank: false,
                        labelWidth: 170,
                        width: 420
                      },
                      {
                        xtype: 'numberfield',
                        fieldLabel: 'Рік народження',
                        labelWidth: 170,
                        width: 420,
                        itemId: 'year',
                        allowExponential: false,
                        allowDecimals: false,
                        allowBlank: false,
                        hideTrigger: true,
                        maxLength: 4,
                        minValue: 1000

                      },
                      {
                        xtype: 'textfield',
                        fieldLabel: 'Довідка видана',
                        itemId: 'certif',
                        value: "для пред’явлення за місцем вимоги",
                        allowBlank: false,
                        labelWidth: 170,
                        width: 420
                      }
                    ]

                  }
                ],
                buttons: [
                  {
                    text: 'Сформувати',
                    handler: function (btn) {
                      let paramsForm = this.up().up().items.items[0],
                        form = paramsForm.getForm();
                      if (form.isValid()) {
                        $App.connection.get(`rest/pgo_objAccounting/createPayerReport?&params=${JSON.stringify({
                          payerID: selection.get('ID'),
                          issued: paramsForm.queryById('issued').getValue(),
                          year: paramsForm.queryById('year').getValue(),
                          certif: paramsForm.queryById('certif').getValue()
                        })}`, {responseType: 'arraybuffer'})
                          .catch(function (err) {
                            throw new UB.UBError(err.message);
                          }).then(function (response) {
                          let blobData,
                            byteArray = response.data;
                          blobData = new Blob(
                            [byteArray],
                            {type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'}
                          );
                          saveAs(blobData, 'familyMembers.docx');
                          win.close();
                        });
                      } else {
                        $App.dialogError(`Заповніть обов'язкові поля!`);
                      }

                    }
                  }
                ]
              });
            }
          });
        }
      }
    };

    config.target = $App.viewport.centralPanel;
    config.tabId = 'comm_search' + me.id;

    if (me.isOpenSecondTime) {
      me.senderGrid.preventFormClose = true;
      try {
        me.senderGrid.close();
      } finally {
        delete me.senderGrid.preventFormClose;
      }
    }

    UB.core.UBApp.doCommand(config);
    me.up().hide()
  },

  onCloseW: function () {
    var me = this;
    me.hide();
    return false;
  }

});
