// @! "do not remove comments below unless you know what you do!"
// @isDefault "true"
// @entity "comm_regInfoCurr"
// @model "COMM"
// @formType "auto"
// @caption "Інформація про реєстрацію (Поточна реєстрація)"
// @description "Інформація про реєстрацію (Поточна реєстрація)"
exports.formDef = {
    requiredFields: ['payerID', 'region', 'area'],
    parentConfig: {
		layout: {
			type: "vbox",
			align: 'stretch'
		},
    },
    items: [
        {
            attributeName: 'state',
            readOnly: true
        },
        {
            attributeName: "regUnit",
            listeners: {
                beforeQuerySend: function () {
                    this.store.ubRequest.whereList = {
                        byUser: {
                            expression: 'mi_createUser',
                            condition: "=",
                            values: {mi_createUser: $App.connection.userData().UserID}
                        }
                    };
                    if (this.getValue()) {
                        this.store.ubRequest.whereList.byCurrID = {
                            expression: 'ID',
                            condition: "=",
                            values: {ID: this.getValue()}
                        };
                        this.store.ubRequest.logicalPredicates = ["([byUser] or [byCurrID])"];
                    } else {
                        this.store.ubRequest.logicalPredicates = [];
                    }

                }
            }
        },
        {
            attributeName: "regDate"
        },
        {
            xtype: 'ubcombobox',
            valueField: 'areaName',
            displayField: 'areaName',
            fieldLabel: $App.domainInfo.get('comm_regInfoCurr').attr('area').caption,
            itemId: 'area',
            readOnly: !ADM.AccessManager.checkAccess('RTG_05_01_02'),
            disableContextMenu: true,
            ubRequest: {
                entity: "pgo_ngoDict",
                method: "select",
                fieldList: ['areaName'],
                groupList: ['areaName'],
                orderList: {sortOrder: {expression: "areaName", order: 'asc'}}
            },
            listeners: {
                change(fld, newValue, oldValue) {
                    let form = this.up('form'),
                        regionCtrl = form.queryById('region'),
                        settlementCtrl = form.getField('settlement');
                    if (newValue) {
                        form.record.set('area', newValue);
                        fld.store.reload();
                        INV.services.setWhereList(regionCtrl, 'byAreaName', 'areaName', newValue);
                        if (oldValue) {
                            regionCtrl.setValue(null);
                            form.record.set('region', null);
                            settlementCtrl.setValue(null);
                        }

                    } else {
                        form.record.set('area', null);
                        INV.services.setWhereList(regionCtrl, 'byAreaName', 'areaName', true);
                        regionCtrl.setValue(null);
                        form.record.set('region', null);
                        INV.services.setWhereList(settlementCtrl, 'byRegionName', 'pgoDictID.regionName', -1);
                        settlementCtrl.setValue(null);
                    }
                    regionCtrl.store.reload();
                },
                beforeRender: function () {
                    this.store.ubRequest.fieldList = ['areaName']
                }
            }
        },
        {
            xtype: 'ubcombobox',
            valueField: 'regionName',
            displayField: 'regionName',
            readOnly: !ADM.AccessManager.checkAccess('RTG_05_01_02'),
            fieldLabel: $App.domainInfo.get('comm_regInfoCurr').attr('region').caption,
            itemId: "region",
            flex: 1,
            ubRequest: {
                entity: "pgo_ngoDict",
                method: "select",
                fieldList: ['regionName'],
                groupList: ['regionName'],
                orderList: {sortOrder: {expression: "regionName", order: 'asc'}}
            },
            margin: '8 15 28 15',
            listeners: {
                change(fld, newValue, oldValue) {
                    let form = this.up('form'),
                        settlementCtrl = form.getField('settlement');
                    if (newValue) {
                        form.record.set('region', newValue);
                        INV.services.setWhereList(settlementCtrl, 'byRegionName', 'pgoDictID.regionName', fld.getRawValue());
                        if (oldValue) {
                            settlementCtrl.setValue(null);
                        }

                    } else {
                        form.record.set('region', null);
                        INV.services.setWhereList(settlementCtrl, 'byRegionName', 'pgoDictID.regionName', true);
                        settlementCtrl.setValue(null);
                    }
                    settlementCtrl.store.reload();
                },
                beforeRender: function () {
                    this.store.ubRequest.fieldList = ['regionName']
                }
            }
        },
        {
            attributeName: "settlement",
			fieldList: ["ID", "governmentShortName", "governmentStatus"],
            whereList: {},
            listeners: {
                change(fld, newValue, oldValue) {
                    let form = this.up('form'),
                        streetCtrl = form.getField('street'),
						settlementDistrict = form.getField('settlementDistrict');
                    if (newValue) {
                        INV.services.setWhereList(streetCtrl, 'bySettlementDictID', 'settlementDictID', newValue);
                        if (oldValue) {
                            streetCtrl.setValue(null);
							settlementDistrict.setValue(null);
                        }

						let store = fld.getStore(),
							governmentStatus = store.getById(newValue).get('governmentStatus');

						if(governmentStatus === 'Місто' || governmentStatus === 'місто'){
							settlementDistrict.show();
							INV.services.setWhereList(settlementDistrict, 'bySettlement', 'settlementDictID', newValue)
						}
						else {
							settlementDistrict.hide();
						}

                    } else {
                        INV.services.setWhereList(streetCtrl, 'bySettlementDictID', 'settlementDictID', -1);
						INV.services.setWhereList(settlementDistrict, 'bySettlement', 'settlementDictID', -1);
						settlementDistrict.hide();
                        streetCtrl.setValue(null);
						settlementDistrict.setValue(null);
                    }
					settlementDistrict.store.reload();
                    streetCtrl.store.reload();
                }
            }
        },
		{
			attributeName: "settlementDistrict",
			fieldList: ["ID", "name", "settlementDictID"],
			whereList: {},
			hidden: true,
			listeners: {
				change(fld, newValue, oldValue) {
					let form = this.up('form'),
						streetCtrl = form.getField('street');
					if (newValue) {
						INV.services.setWhereList(streetCtrl, 'byDistrict', 'settlementDistrictID', newValue);
						if (oldValue) {
							streetCtrl.setValue(null);
						}
					} else {
						if (streetCtrl.store.ubRequest.whereList && streetCtrl.store.ubRequest.whereList.byDistrict) {
							delete streetCtrl.store.ubRequest.whereList.byDistrict;
						}
						streetCtrl.setValue(null);
					}
					streetCtrl.store.reload();
				}
			}
		},
        {
            attributeName: "streetType",
            listeners: {
                change(fld, newValue, oldValue) {
                    let form = this.up('form'),
                        streetCtrl = form.getField('street');

                    if (newValue) {
                        INV.services.setWhereList(streetCtrl, 'byStreetType', 'streetType', newValue);
                        if (oldValue) {
                            streetCtrl.setValue(null);
                        }

                    } else {
                        INV.services.setWhereList(streetCtrl, 'byStreetType', 'streetType', -1);
                        streetCtrl.setValue(null);
                    }
                    streetCtrl.store.reload();
                }
            }
        },
        {
            attributeName: "street",
            whereList: {}
        },
        {
            attributeName: "houseNum"
        },
        {
            attributeName: "flatNum"
        },
        {
            attributeName: "postIndex"
        },
        {
            attributeName: "regReason"
        },
        {
            xtype: 'fieldset',
            margin: "0, 15, 5, 15",
            title: 'Документ для реєстрації',
            collapsible: true,
            layout: {
                type: "vbox",
                align: "stretch"
            },
            defaults: {
                flex: 1
            },
            items: [{
                attributeName: 'docType'
            }, {
                attributeName: 'series'
            }, {
                attributeName: 'num'
            }, {
                attributeName: 'issueDate'
            }, {
                attributeName: 'docRegUnit',
                whereList: {}
            }, {
                attributeName: 'validTo'
            }]
        }

    ]
};
